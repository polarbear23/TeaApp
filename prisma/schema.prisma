generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_SHADOW")
}

model User {
    id        Int      @id @default(autoincrement())
    email     String
    password  String
    orders    Order[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Payment {
//     id             Int    @id @default(autoincrement())
//     userId         Int
//     fullName       String
//     billingAddress String
//     postcode       String
//     cardNumber     String
//     securityCode   String
//     expiryDate     String
// }

model Order {
    id            Int             @id @default(autoincrement())
    isConfirmed   Boolean         @default(false)
    OrderProducts OrderProducts[]
    User          User            @relation(fields: [userId], references: [id])
    userId        Int
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model OrderProducts {
    orderId   Int
    order     Order   @relation(fields: [orderId], references: [id])
    productId Int
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@id([orderId, productId])
}

// model Cart {
//     id        Int      @id @default(autoincrement())
//     userId    Int
//     User      User     @relation(fields: [userId], references: [id])
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Product {
    id            Int             @id @default(autoincrement())
    price         Int
    quantity      Int
    teaId         Int             @unique
    Tea           Tea             @relation(fields: [teaId], references: [id])
    OrderProducts OrderProducts[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model Tea {
    id            Int       @id @default(autoincrement())
    name          String
    description   String
    amountInStock Int
    origin        String
    brewTime      Int
    temperature   Int
    Product       Product[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}
